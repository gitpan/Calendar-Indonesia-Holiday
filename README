NAME
    Calendar::Indonesia::Holiday - List Indonesian public holidays

VERSION
    version 0.14

SYNOPSIS
     use Calendar::Indonesia::Holiday qw(
         list_id_holidays
         enum_id_workdays
         count_id_workdays
     );

     # list Indonesian holidays for the year 2011, without the joint leave days
     # ("cuti bersama"), show only the dates

     my $res = list_id_holidays(year => 2011, is_joint_leave=>0);
     # sample result
     [200, "OK", [
       '2011-01-01',
       '2011-02-03',
       '2011-02-16',
       '2011-03-05',
       '2011-04-22',
       '2011-05-17',
       '2011-06-02',
       '2011-06-29',
       '2011-08-17',
       '2011-08-31',
       '2011-09-01',
       '2011-11-07',
       '2011-11-27',
       '2011-12-25',
     ]];

     # list religious Indonesian holidays, show full details
     my $res = list_id_holidays(year => 2011,
                                "tags.has" => ['religious'], detail=>1);

     # sample result
     [200, "OK", [
       {date       => '2011-02-16',
        day        => 16,
        month      => 2,
        year       => 2011,
        ind_name    => 'Maulid Nabi Muhammad',
        eng_name    => 'Mawlid',
        en_aliases => ['Mawlid An-Nabi'],
        id_aliases => ['Maulud'],
        is_holiday => 1,
        tags       => [qw/religious religion=islam calendar=lunar/],
       },
       ...
     ]];

     # check whether 2011-02-16 is a holiday
     my $res = list_id_holidays(date => '2011-02-16');
     print "2011-02-16 is a holiday\n" if @{$res->[2]};

     # enumerate working days for a certain period
     my $res = enum_id_workdays(year=>2011, month=>7);

     # idem, but returns a number instead. year/month defaults to current
     # year/month.
     my $res = count_id_workdays();

DESCRIPTION
    This module provides functions to list Indonesian holidays.

    This module uses Log::Any logging framework.

    This module has Rinci metadata.

FAQ
  What is "joint leave"?
    Workers are normally granted 12 days of paid leave per year. They are
    free to spend it on whichever days they want. The joint leave ("cuti
    bersama") is a government program of recent years (since 2002) to
    recommend that some of these leave days be spent together nationally on
    certain days, especially during Lebaran (Eid Ul-Fitr). It is not
    mandated, but many do follow it anyway, e.g. government civil workers,
    banks, etc. I am marking joint leave days with is_joint_leave=1 and
    is_holiday=0, while the holidays themselves with is_holiday=1, so you
    can differentiate/select both/either one.

  Holidays before 2002?
    Will be provided if there is demand and data source.

  Holidays after (current year)+1?
    Some religious holidays, especially Vesakha, are not determined yet.
    Joint leave days are also usually decreed by the government in May/June
    of the preceding year.

SEE ALSO
    This API will also be available on GudangAPI, http://gudangapi.com/

AUTHOR
    Steven Haryanto <stevenharyanto@gmail.com>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2013 by Steven Haryanto.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

FUNCTIONS
    None are exported by default, but they are exportable.

  count_id_workdays(%args) -> [status, msg, result, meta]
    Working day is defined as day that is not Saturday*/Sunday/holiday/joint
    leave days*. If work*saturdays is set to true, Saturdays are also
    counted as working days. If observe*joint_leaves is set to false, joint
    leave days are also counted as working days.

    Contains data from years 2002 to 2014 (joint leave days until 2014).

    Arguments ('*' denotes required arguments):

    *   end_date => *str*

        End date.

        Defaults to end of current month. Either a string in the form of
        "YYYY-MM-DD", or a DateTime object, is accepted.

    *   observe_joint_leaves => *bool* (default: 1)

        If set to 0, do not observe joint leave as holidays.

    *   start_date => *str*

        Starting date.

        Defaults to start of current month. Either a string in the form of
        "YYYY-MM-DD", or a DateTime object, is accepted.

    *   work_saturdays => *bool* (default: 0)

        If set to 1, Saturday is a working day.

    Return value:

    Returns an enveloped result (an array). First element (status) is an
    integer containing HTTP status code (200 means OK, 4xx caller error, 5xx
    function error). Second element (msg) is a string containing error
    message, or 'OK' if status is 200. Third element (result) is optional,
    the actual result. Fourth element (meta) is called result metadata and
    is optional, a hash that contains extra information.

  enum_id_workdays(%args) -> [status, msg, result, meta]
    Working day is defined as day that is not Saturday*/Sunday/holiday/joint
    leave days*. If work*saturdays is set to true, Saturdays are also
    counted as working days. If observe*joint_leaves is set to false, joint
    leave days are also counted as working days.

    Contains data from years 2002 to 2014 (joint leave days until 2014).

    Arguments ('*' denotes required arguments):

    *   end_date => *str*

        End date.

        Defaults to end of current month. Either a string in the form of
        "YYYY-MM-DD", or a DateTime object, is accepted.

    *   observe_joint_leaves => *bool* (default: 1)

        If set to 0, do not observe joint leave as holidays.

    *   start_date => *str*

        Starting date.

        Defaults to start of current month. Either a string in the form of
        "YYYY-MM-DD", or a DateTime object, is accepted.

    *   work_saturdays => *bool* (default: 0)

        If set to 1, Saturday is a working day.

    Return value:

    Returns an enveloped result (an array). First element (status) is an
    integer containing HTTP status code (200 means OK, 4xx caller error, 5xx
    function error). Second element (msg) is a string containing error
    message, or 'OK' if status is 200. Third element (result) is optional,
    the actual result. Fourth element (meta) is called result metadata and
    is optional, a hash that contains extra information.

  list_id_holidays(%args) -> [status, msg, result, meta]
    List holidays and joint leave days ("cuti bersama").

    Contains data from years 2002 to 2014 (joint leave days until 2014).

    Arguments ('*' denotes required arguments):

    *   date => *str*

        Only return records where the 'date' field equals specified value.

    *   date.contains => *str*

        Only return records where the 'date' field contains specified text.

    *   date.in => *array*

        Only return records where the 'date' field is in the specified
        values.

    *   date.is => *str*

        Only return records where the 'date' field equals specified value.

    *   date.max => *str*

        Only return records where the 'date' field is less than or equal to
        specified value.

    *   date.min => *array*

        Only return records where the 'date' field is greater than or equal
        to specified value.

    *   date.not_contains => *str*

        Only return records where the 'date' field does not contain a
        certain text.

    *   date.not_in => *array*

        Only return records where the 'date' field is not in the specified
        values.

    *   date.xmax => *str*

        Only return records where the 'date' field is less than specified
        value.

    *   date.xmin => *array*

        Only return records where the 'date' field is greater than specified
        value.

    *   day => *int*

        Only return records where the 'day' field equals specified value.

    *   day.in => *array*

        Only return records where the 'day' field is in the specified
        values.

    *   day.is => *int*

        Only return records where the 'day' field equals specified value.

    *   day.max => *int*

        Only return records where the 'day' field is less than or equal to
        specified value.

    *   day.min => *array*

        Only return records where the 'day' field is greater than or equal
        to specified value.

    *   day.not_in => *array*

        Only return records where the 'day' field is not in the specified
        values.

    *   day.xmax => *int*

        Only return records where the 'day' field is less than specified
        value.

    *   day.xmin => *array*

        Only return records where the 'day' field is greater than specified
        value.

    *   detail => *bool* (default: 0)

        Return array of full records instead of just ID fields.

        By default, only the key (ID) field is returned per result entry.

    *   dow => *int*

        Only return records where the 'dow' field equals specified value.

    *   dow.in => *array*

        Only return records where the 'dow' field is in the specified
        values.

    *   dow.is => *int*

        Only return records where the 'dow' field equals specified value.

    *   dow.max => *int*

        Only return records where the 'dow' field is less than or equal to
        specified value.

    *   dow.min => *array*

        Only return records where the 'dow' field is greater than or equal
        to specified value.

    *   dow.not_in => *array*

        Only return records where the 'dow' field is not in the specified
        values.

    *   dow.xmax => *int*

        Only return records where the 'dow' field is less than specified
        value.

    *   dow.xmin => *array*

        Only return records where the 'dow' field is greater than specified
        value.

    *   fields => *array*

        Select fields to return.

    *   is_holiday => *bool*

        Only return records where the 'is_holiday' field equals specified
        value.

    *   is_holiday.is => *bool*

        Only return records where the 'is_holiday' field equals specified
        value.

    *   is_joint_leave => *bool*

        Only return records where the 'is_joint_leave' field equals
        specified value.

    *   is_joint_leave.is => *bool*

        Only return records where the 'is_joint_leave' field equals
        specified value.

    *   month => *int*

        Only return records where the 'month' field equals specified value.

    *   month.in => *array*

        Only return records where the 'month' field is in the specified
        values.

    *   month.is => *int*

        Only return records where the 'month' field equals specified value.

    *   month.max => *int*

        Only return records where the 'month' field is less than or equal to
        specified value.

    *   month.min => *array*

        Only return records where the 'month' field is greater than or equal
        to specified value.

    *   month.not_in => *array*

        Only return records where the 'month' field is not in the specified
        values.

    *   month.xmax => *int*

        Only return records where the 'month' field is less than specified
        value.

    *   month.xmin => *array*

        Only return records where the 'month' field is greater than
        specified value.

    *   q => *str*

        Search.

    *   random => *bool* (default: 0)

        Return records in random order.

    *   result_limit => *int*

        Only return a certain number of records.

    *   result_start => *int* (default: 1)

        Only return starting from the n'th record.

    *   sort => *str*

        Order records according to certain field(s).

        A list of field names separated by comma. Each field can be prefixed
        with '-' to specify descending order instead of the default
        ascending.

    *   tags => *array*

        Only return records where the 'tags' field equals specified value.

    *   tags.has => *array*

        Only return records where the 'tags' field is an array/list which
        contains specified value.

    *   tags.is => *array*

        Only return records where the 'tags' field equals specified value.

    *   tags.lacks => *array*

        Only return records where the 'tags' field is an array/list which
        does not contain specified value.

    *   with_field_names => *bool*

        Return field names in each record (as hash/associative array).

        When enabled, function will return each record as hash/associative
        array (field name => value pairs). Otherwise, function will return
        each record as list/array (field value, field value, ...).

    *   year => *int*

        Only return records where the 'year' field equals specified value.

    *   year.in => *array*

        Only return records where the 'year' field is in the specified
        values.

    *   year.is => *int*

        Only return records where the 'year' field equals specified value.

    *   year.max => *int*

        Only return records where the 'year' field is less than or equal to
        specified value.

    *   year.min => *array*

        Only return records where the 'year' field is greater than or equal
        to specified value.

    *   year.not_in => *array*

        Only return records where the 'year' field is not in the specified
        values.

    *   year.xmax => *int*

        Only return records where the 'year' field is less than specified
        value.

    *   year.xmin => *array*

        Only return records where the 'year' field is greater than specified
        value.

    Return value:

    Returns an enveloped result (an array). First element (status) is an
    integer containing HTTP status code (200 means OK, 4xx caller error, 5xx
    function error). Second element (msg) is a string containing error
    message, or 'OK' if status is 200. Third element (result) is optional,
    the actual result. Fourth element (meta) is called result metadata and
    is optional, a hash that contains extra information.

